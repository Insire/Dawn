<controls:AdonisWindow x:Class="Dawn.Wpf.Shell"
                       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
                       xmlns:componentmodel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                       xmlns:controls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI"
                       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                       xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                       xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
                       xmlns:local="clr-namespace:Dawn.Wpf"
                       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                       xmlns:mvvm="http://SoftThorn.MvvmScarletToolkit.com/winfx/xaml/shared"
                       Name="root"
                       Title="{Binding Title}"
                       Width="900"
                       Height="450"
                       d:DataContext="{d:DesignInstance Type=local:ShellViewModel,
                                                        IsDesignTimeCreatable=False}"
                       AllowDrop="True"
                       Drop="OnDrop"
                       IconVisibility="Collapsed"
                       Topmost="{Binding IsTopMost, ElementName=root}"
                       mc:Ignorable="d">

    <!--  DataContext: ShellViewModel  -->

    <controls:AdonisWindow.TitleBarContent>
        <DockPanel IsEnabled="{Binding Updates.IsBusy, Converter={mvvm:IsNot}}" LastChildFill="False">

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding Configuration.ValidateCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Button DockPanel.Dock="Right" ToolTipService.ShowOnDisabled="True">
                <Button.Style>
                    <Style BasedOn="{StaticResource {x:Static adonisUi:Styles.WindowButton}}" TargetType="{x:Type Button}">
                        <Setter Property="Command" Value="{Binding CheckForApplicationUpdateCommand}" />
                        <Setter Property="ToolTip" Value="Check for updates from github" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsApplicationUpdateAvailable}" Value="True">
                                <Setter Property="ToolTip" Value="Updates are available! Update?" />
                                <Setter Property="Command" Value="{Binding GetApplicationUpdateCommand}" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsApplicationUpdateAvailable}" Value="False" />
                                    <Condition Binding="{Binding HasCheckedForApplicationUpdate}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="ToolTip" Value="No updates right now" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>

                <icons:PackIconFontAwesome>
                    <icons:PackIconFontAwesome.Style>
                        <Style TargetType="{x:Type icons:PackIconFontAwesome}">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.AccentBrush}}" />

                            <Setter Property="Kind" Value="GithubBrands" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsApplicationUpdateAvailable}" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.SuccessBrush}}" />
                                    <Setter Property="Kind" Value="DownloadSolid" />
                                </DataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsApplicationUpdateAvailable}" Value="False" />
                                        <Condition Binding="{Binding HasCheckedForApplicationUpdate}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.DisabledForegroundBrush}}" />
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </icons:PackIconFontAwesome.Style>
                </icons:PackIconFontAwesome>
            </Button>

            <Button Click="ShowAbout"
                    DockPanel.Dock="Right"
                    Style="{StaticResource {x:Static adonisUi:Styles.WindowButton}}"
                    ToolTip="About">
                <icons:PackIconFontAwesome Kind="InfoSolid" />
            </Button>

            <Button Click="OnToggleTheme"
                    DockPanel.Dock="Right"
                    Style="{StaticResource {x:Static adonisUi:Styles.WindowButton}}"
                    ToolTip="Toggle Theme">
                <icons:PackIconFontAwesome Kind="PaintBrushSolid" />
            </Button>

            <Button Click="OpenConfiguration"
                    DockPanel.Dock="Right"
                    ToolTip="Open configuration">
                <Button.Style>
                    <Style BasedOn="{StaticResource {x:Static adonisUi:Styles.WindowButton}}" TargetType="{x:Type Button}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Configuration.HasErrors}" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <icons:PackIconFontAwesome Kind="CogSolid" />
            </Button>

            <ToggleButton x:Name="ViewToggle"
                          DockPanel.Dock="Right"
                          IsChecked="False"
                          ToolTip="Toggle view">
                <ToggleButton.Style>
                    <Style BasedOn="{StaticResource {x:Static adonisUi:Styles.WindowToggleButton}}" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Content">
                            <Setter.Value>
                                <icons:PackIconFontAwesome Kind="ThListSolid" />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Content">
                                    <Setter.Value>
                                        <icons:PackIconFontAwesome Kind="ThSolid" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>

            <Button Command="{Binding ShowLogCommand}"
                    DockPanel.Dock="Right"
                    Style="{StaticResource {x:Static adonisUi:Styles.WindowButton}}"
                    ToolTip="Open logs">
                <icons:PackIconFontAwesome Kind="AlignLeftSolid" />
            </Button>

            <ToggleButton DockPanel.Dock="Right"
                          IsChecked="{Binding IsTopMost, ElementName=root}"
                          ToolTip="Toggle keep window on top">

                <ToggleButton.Style>
                    <Style BasedOn="{StaticResource {x:Static adonisUi:Styles.WindowToggleButton}}" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Content">
                            <Setter.Value>
                                <icons:PackIconFontAwesome Kind="ToggleOffSolid" />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Content">
                                    <Setter.Value>
                                        <icons:PackIconFontAwesome Kind="ToggleOnSolid" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
        </DockPanel>
    </controls:AdonisWindow.TitleBarContent>

    <Grid>
        <Grid.Resources>
            <mvvm:BindingProxy x:Key="UpdatesProxy" Data="{Binding Updates}" />
            <mvvm:BindingProxy x:Key="StagingsProxy" Data="{Binding Stagings}" />

            <CollectionViewSource x:Key="Updates" Source="{Binding Updates.Items}">
                <CollectionViewSource.SortDescriptions>
                    <componentmodel:SortDescription Direction="Descending" PropertyName="Name" />
                </CollectionViewSource.SortDescriptions>
            </CollectionViewSource>
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="3*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="8" />
        </Grid.RowDefinitions>

        <!--  Empty View  -->

        <DockPanel Grid.Row="0"
                   Grid.RowSpan="2"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center">
            <DockPanel.Style>
                <Style TargetType="{x:Type DockPanel}">
                    <Setter Property="Visibility" Value="Hidden" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Stagings.Count}" Value="0" />
                                <Condition Binding="{Binding Updates.Count}" Value="0" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Visibility" Value="Visible" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Style>

            <TextBlock VerticalAlignment="Center"
                       DockPanel.Dock="Top"
                       TextAlignment="Center">
                <Run Text="This looks rather empty ..." />
                <LineBreak />
                <Run Text="Why not drop some files here?" />
            </TextBlock>

            <icons:PackIconFontAwesome Margin="8"
                                       HorizontalAlignment="Center"
                                       Kind="ChevronDownSolid" />
        </DockPanel>

        <!--  Backups  -->

        <ScrollViewer Grid.Row="0" Grid.RowSpan="3">
            <ScrollViewer.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding Updates.RefreshCommand}" Header="Refresh">
                        <MenuItem.Icon>
                            <icons:PackIconFontAwesome Kind="SyncSolid" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem Command="{Binding Updates.DeleteAllCommand}" Header="Delete all backups">
                        <MenuItem.Icon>
                            <icons:PackIconFontAwesome Foreground="{DynamicResource {x:Static adonisUi:Brushes.ErrorBrush}}" Kind="TrashSolid" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </ScrollViewer.ContextMenu>

            <ItemsControl ItemsSource="{Binding Source={StaticResource Updates}}">

                <ItemsControl.Style>
                    <Style BasedOn="{StaticResource {x:Type ItemsControl}}" TargetType="{x:Type ItemsControl}">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <WrapPanel IsItemsHost="True" />
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="ItemTemplate">
                            <Setter.Value>
                                <DataTemplate DataType="{x:Type local:BackupViewModel}">
                                    <GroupBox Width="200"
                                              Height="130"
                                              Margin="8">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Loaded">
                                                <i:InvokeCommandAction Command="{Binding LoadMetaDataCommand}" />
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>

                                        <GroupBox.Header>
                                            <Button HorizontalAlignment="Stretch"
                                                    HorizontalContentAlignment="Stretch"
                                                    Background="Transparent"
                                                    BorderBrush="Transparent"
                                                    Command="{Binding EditMetaDataCommand}">
                                                <Button.Style>
                                                    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
                                                        <Setter Property="ToolTip" Value="Rename backup" />
                                                        <Style.Triggers>

                                                            <DataTrigger Binding="{Binding Comment, Converter={mvvm:IsNullOrWhiteSpace}}" Value="False">
                                                                <Setter Property="ToolTip" Value="{Binding Comment, Mode=OneWay, StringFormat={}Backup: {0}}" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Button.Style>

                                                <TextBlock TextTrimming="CharacterEllipsis">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Text" Value="{Binding Name, Mode=OneWay, StringFormat={}Backup: {0}}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding CustomName, Converter={mvvm:IsNullOrEmpty}}" Value="False">
                                                                    <Setter Property="Text">
                                                                        <Setter.Value>
                                                                            <MultiBinding StringFormat="{}{0} - {1}">
                                                                                <Binding Mode="OneWay" Path="CustomName" />
                                                                                <Binding Mode="OneWay" Path="Name" />
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </Button>
                                        </GroupBox.Header>

                                        <DockPanel>
                                            <Button Margin="0,8,0,0"
                                                    Command="{Binding Data.RestoreCommand, Source={StaticResource UpdatesProxy}}"
                                                    CommandParameter="{Binding}"
                                                    DockPanel.Dock="Bottom"
                                                    ToolTip="Restore backup">
                                                <icons:PackIconFontAwesome Kind="PlaySolid" />
                                            </Button>

                                            <Button Width="32"
                                                    Height="32"
                                                    Command="{Binding DeleteCommand}"
                                                    DockPanel.Dock="Right"
                                                    ToolTip="Delete backup">
                                                <icons:PackIconFontAwesome Kind="TrashSolid" />
                                            </Button>

                                            <Button Width="32"
                                                    Height="32"
                                                    Margin="8,0"
                                                    Command="{Binding OpenExternallyCommand}"
                                                    DockPanel.Dock="Right"
                                                    ToolTip="Open in explorer">
                                                <icons:PackIconFontAwesome Kind="ExternalLinkAltSolid" />
                                            </Button>

                                            <TextBlock Text="{Binding Count, StringFormat='{}Files: {0}'}">
                                                <TextBlock.ToolTip>
                                                    <ToolTip DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                                        <ItemsControl DockPanel.Dock="Bottom" ItemsSource="{Binding Items}">
                                                            <ItemsControl.ItemsPanel>
                                                                <ItemsPanelTemplate>
                                                                    <VirtualizingStackPanel IsItemsHost="True" />
                                                                </ItemsPanelTemplate>
                                                            </ItemsControl.ItemsPanel>
                                                            <ItemsControl.ItemTemplate>
                                                                <DataTemplate>
                                                                    <TextBlock Text="{Binding Value}" />
                                                                </DataTemplate>
                                                            </ItemsControl.ItemTemplate>
                                                        </ItemsControl>
                                                    </ToolTip>
                                                </TextBlock.ToolTip>
                                            </TextBlock>
                                        </DockPanel>
                                    </GroupBox>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Updates.Count}" Value="0">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsChecked, ElementName=ViewToggle}" Value="True">
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel IsItemsHost="True" />
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="ItemTemplate">
                                    <Setter.Value>
                                        <DataTemplate DataType="{x:Type local:BackupViewModel}">

                                            <DockPanel Margin="8,0,0,0">
                                                <DockPanel.ToolTip>
                                                    <ToolTip DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                                        <ItemsControl DockPanel.Dock="Bottom" ItemsSource="{Binding Items}">
                                                            <ItemsControl.ItemsPanel>
                                                                <ItemsPanelTemplate>
                                                                    <VirtualizingStackPanel IsItemsHost="True" />
                                                                </ItemsPanelTemplate>
                                                            </ItemsControl.ItemsPanel>
                                                            <ItemsControl.ItemTemplate>
                                                                <DataTemplate>
                                                                    <TextBlock Text="{Binding Value}" />
                                                                </DataTemplate>
                                                            </ItemsControl.ItemTemplate>
                                                        </ItemsControl>
                                                    </ToolTip>
                                                </DockPanel.ToolTip>

                                                <icons:PackIconFontAwesome Margin="8,0"
                                                                           VerticalAlignment="Center"
                                                                           DockPanel.Dock="Left"
                                                                           Kind="FolderSolid" />

                                                <Button Margin="8,0"
                                                        Command="{Binding DeleteCommand}"
                                                        DockPanel.Dock="Right"
                                                        ToolTip="Delete backup">
                                                    <icons:PackIconFontAwesome Kind="TrashSolid" />
                                                </Button>

                                                <Button Command="{Binding Data.RestoreCommand, Source={StaticResource UpdatesProxy}}"
                                                        CommandParameter="{Binding}"
                                                        DockPanel.Dock="Right"
                                                        ToolTip="Restore backup">
                                                    <icons:PackIconFontAwesome Kind="PlaySolid" />
                                                </Button>

                                                <Button Margin="8,0"
                                                        Command="{Binding EditMetaDataCommand}"
                                                        DockPanel.Dock="Right"
                                                        ToolTip="Rename backup">
                                                    <icons:PackIconFontAwesome Kind="EditSolid" />
                                                </Button>

                                                <Button Command="{Binding OpenExternallyCommand}"
                                                        DockPanel.Dock="Right"
                                                        ToolTip="Open in explorer">
                                                    <icons:PackIconFontAwesome Kind="ExternalLinkAltSolid" />
                                                </Button>

                                                <TextBlock Margin="8,0"
                                                           VerticalAlignment="Center"
                                                           DockPanel.Dock="Right">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Text" Value="{Binding Count, StringFormat='{}{0} Files', Mode=OneWay}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding Count}" Value="1">
                                                                    <Setter Property="Text" Value="{Binding Count, StringFormat='{}{0} File', Mode=OneWay}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>

                                                <TextBlock VerticalAlignment="Center" TextTrimming="CharacterEllipsis">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Setter Property="Text" Value="{Binding Name, Mode=OneWay, StringFormat={}Backup: {0}}" />
                                                            <Style.Triggers>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CustomName, Converter={mvvm:IsNullOrEmpty}}" Value="False" />
                                                                        <Condition Binding="{Binding Comment, Converter={mvvm:IsNullOrEmpty}}" Value="True" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Text">
                                                                        <Setter.Value>
                                                                            <MultiBinding StringFormat="{}Backup: {0} - {1} {2}">
                                                                                <Binding Mode="OneWay" Path="CustomName" />
                                                                                <Binding Mode="OneWay" Path="Name" />
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </MultiDataTrigger>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding CustomName, Converter={mvvm:IsNullOrEmpty}}" Value="False" />
                                                                        <Condition Binding="{Binding Comment, Converter={mvvm:IsNullOrEmpty}}" Value="False" />
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Text">
                                                                        <Setter.Value>
                                                                            <MultiBinding StringFormat="{}Backup: {0} - {1} | {2}">
                                                                                <Binding Mode="OneWay" Path="CustomName" />
                                                                                <Binding Mode="OneWay" Path="Name" />
                                                                                <Binding Mode="OneWay" Path="Comment" />
                                                                            </MultiBinding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </MultiDataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </DockPanel>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.Style>

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding Updates.LoadCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ItemsControl>
        </ScrollViewer>

        <!--  Staging details  -->

        <DockPanel Grid.Row="1" Background="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}">
            <DockPanel.Style>
                <Style TargetType="{x:Type DockPanel}">
                    <Setter Property="Visibility" Value="{Binding StagingVisibility, ElementName=root, Mode=TwoWay}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Stagings.Count}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Style>

            <ListBox Margin="0,8,0,0"
                     ItemsSource="{Binding Stagings.Items}"
                     SelectedItem="{Binding Stagings.SelectedItem}">
                <ListBox.ItemContainerStyle>
                    <Style BasedOn="{StaticResource {x:Static adonisUi:Styles.RippleListBoxItem}}" TargetType="{x:Type ListBoxItem}">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                </ListBox.ItemContainerStyle>

                <ListBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type local:StagingViewModel}">
                        <DockPanel HorizontalAlignment="Stretch">
                            <icons:PackIconFontAwesome VerticalAlignment="Center"
                                                       DockPanel.Dock="Left"
                                                       Kind="FileSolid" />
                            <Button Command="{Binding Data.RemoveCommand, Source={StaticResource StagingsProxy}}"
                                    DockPanel.Dock="Right"
                                    ToolTip="Unstage this">
                                <icons:PackIconFontAwesome Kind="TrashSolid" />
                            </Button>
                            <TextBlock Margin="8,0" Text="{Binding Path}" />
                        </DockPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </DockPanel>

        <!--  Staging bar  -->

        <DockPanel Grid.Row="2"
                   Grid.RowSpan="1"
                   Background="{DynamicResource {x:Static adonisUi:Brushes.Layer2BackgroundBrush}}">
            <DockPanel.Style>
                <Style TargetType="{x:Type DockPanel}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Stagings.Count}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Style>

            <DockPanel Margin="8,8,8,8"
                       DockPanel.Dock="Bottom"
                       LastChildFill="False">

                <ToggleButton DockPanel.Dock="Left" IsChecked="{Binding StagingChecked, ElementName=root}">
                    <ToggleButton.Style>
                        <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
                            <Setter Property="Content">
                                <Setter.Value>
                                    <icons:PackIconFontAwesome Kind="ChevronDownSolid" />
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <icons:PackIconFontAwesome Kind="ChevronUpSolid" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>

                <Button Padding="8"
                        Command="{Binding Stagings.ApplyCommand}"
                        DockPanel.Dock="Right"
                        Style="{StaticResource {x:Static adonisUi:Styles.AccentButton}}"
                        ToolTip="Apply Updates">
                    <icons:PackIconFontAwesome Kind="FileUploadSolid" />
                </Button>

                <Button Margin="8,0"
                        Padding="8"
                        Command="{Binding Stagings.ClearCommand}"
                        DockPanel.Dock="Right"
                        ToolTip="Unstage everything">
                    <icons:PackIconFontAwesome Kind="TrashSolid" />
                </Button>

                <ToggleButton Content="Reuse latest Backup"
                              DockPanel.Dock="Right"
                              IsChecked="{Binding Stagings.ReuseLastBackup}"
                              Style="{StaticResource {x:Static adonisUi:Styles.ToggleSwitch}}" />

                <TextBlock VerticalAlignment="Center" Text="{Binding Stagings.Count, StringFormat='{} Staging Area ({0} Files)'}" />
            </DockPanel>
        </DockPanel>

        <!--  Busy overlay  -->

        <Border Grid.RowSpan="4"
                Background="{DynamicResource {x:Static adonisUi:Brushes.Layer3BackgroundBrush}}"
                Opacity="0.90">

            <Border.Style>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="Visibility" Value="Hidden" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Updates.IsBusy}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Updates.IsBusy}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <ContentControl Width="64"
                            Height="64"
                            ContentTemplate="{StaticResource {x:Static adonisUi:Templates.LoadingBars}}" />
            <Border.InputBindings>
                <MouseBinding Command="{Binding ShowLogCommand}" Gesture="LeftClick" />
            </Border.InputBindings>
        </Border>
    </Grid>
</controls:AdonisWindow>
